---

# file: playbooks/roles/db/tasks/main.yml

- name: be sure dbtier packages are installed (Ubuntu)
  apt: pkg={{ item }} state=installed
  with_items:
    # - mysql-server
    # - python-mysqldb
    - bc
  when: ansible_distribution == "Ubuntu"
  environment:
    DEBIAN_FRONTEND: noninteractive
  tags: mysql

- name: be sure dbtier packages are installed (FreeBSD)
  pkgng: name={{ item }} state=present cached=yes
  with_items:
    # - mariadb55-server-5.5.39
    # - mariadb55-client-5.5.39
    - py27-MySQLdb56-1.2.3_4
  when: ansible_distribution == "FreeBSD"
  tags: mysql

# - name: copy tuning-primer
#   copy: src=../files/mysql/tuning-primer dest=/usr/local/bin/tuning-primer owner=root group={{ conf_root_group }} mode=0755
#   tags: mysql

# - name: copy mysqltuner
#   copy: src=../files/mysql/mysqltuner dest=/usr/local/bin/mysqltuner owner=root group={{ conf_root_group }} mode=0755
#   tags: mysql

#
# MySQL system config (BEFORE PERCONA)
#
# - name: deploy debian.cnf to /etc/mysql/debian.cnf
#   copy: src=../files/mysql/debian.cnf dest=/etc/mysql/debian.cnf owner=root group={{ conf_root_group }} mode=0600
#   when: ansible_distribution == "Ubuntu"
#   tags: [ mysql, mysql-conf, percona ]

- name: create /etc/mysql
  file: path=/etc/mysql state=directory owner=root group={{ conf_root_group }} mode=0755
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (Ubuntu)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/mysql/my.cnf owner=root group={{ conf_root_group }} mode=0644
  # notify: handle_restart_mysql
  when: ansible_distribution == "Ubuntu"
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (FreeBSD)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/my.cnf owner=root group={{ conf_root_group }} mode=0644
  when: ansible_distribution == "FreeBSD"
  tags: [ mysql, mysql-conf, percona ]

#
# percona
#
- include: percona.yml

- name: create replication user
  mysql_user: check_implicit_admin=yes name={{ conf_mysql_replication_user }} password={{ conf_mysql_replication_password }} host=% priv="*.*:RELOAD,LOCK TABLES,REPLICATION CLIENT" state=present
  ignore_errors: yes
  tags: [ mysql, users, mysql-users ]

#
# MySQL system config (AFTER PERCONA)
#
# - name: deploy debian.cnf to /etc/mysql/debian.cnf
#   copy: src=../files/mysql/debian.cnf dest=/etc/mysql/debian.cnf owner=root group={{ conf_root_group }} mode=0600
#   when: ansible_distribution == "Ubuntu"
#   tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (Ubuntu)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/mysql/my.cnf owner=root group={{ conf_root_group }} mode=0644
  # notify: handle_restart_mysql
  when: ansible_distribution == "Ubuntu"
  tags: [ mysql, mysql-conf, percona ]

# - name: restart MySQL
#  command: /bin/true
#  notify: handle_restart_mysql
#  when: conf_wsrep_master == false
#  tags: [ mysql, percona ]

- name: deploy /etc/mysql/my.cnf (FreeBSD)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/my.cnf owner=root group={{ conf_root_group }} mode=0644
  when: ansible_distribution == "FreeBSD"
  tags: [ mysql, mysql-conf, percona ]

#
# For now we don't start MySQL
#
#   First MySQL upgrade then mysql bootstrap
#
- name: mysql service state
  service: name=mysql state=started enabled=yes
  when: ansible_distribution == "Ubuntu"
  ignore_errors: yes
  tags: mysql

#
# 1) Deploy my.cnf
# 2) Set MySQL root pwd
# 3) Import data
# 4) Reload grants / reload mysql
#

- name: deploy my.cnf to root
  template: src=etc/mysql/my.cnf-users.j2 dest=/root/.my.cnf owner=root group={{ conf_root_group }} mode=0600
  tags: [ mysql, mysql-conf, users ]

- name: update mysql root password
  mysql_user: check_implicit_admin=yes name=root host=% password={{ conf_mysql_root_password }} priv="*.*:ALL,GRANT"
  # mysql_user: check_implicit_admin=yes login_host={{ ansible_all_ipv4_addresses.0 }} name=root host=% password={{ conf_mysql_root_password }} priv=*.*:ALL,GRANT
  tags: [ mysql, users, mysql-users, mysqlpass ]

- name: deploy my.cnf to enabled mysql admins
  template: src=etc/mysql/my.cnf-users.j2 dest=/home/{{ item.key }}/.my.cnf owner={{ item.key }} group={{ item.key }} mode=0600
  when: item.value.state == "enabled" and item.value.is_mysql_admin == True
  with_dict: '{{ conf_users }}'
  tags: [ mysql, users, mysql-users ]

- name: remove unused mysql anonymous accesses
  mysql_user: check_implicit_admin=yes name='' host={{ item }} state=absent
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
    - '{{ ansible_fqdn }}'
    - '{{ ansible_hostname }}'
  tags: [ mysql, users, mysql-users ]

- name: remove unused mysql root accesses
  mysql_user: check_implicit_admin=yes name=root host={{ item }} state=absent
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
    - '{{ ansible_fqdn }}'
    - '{{ ansible_hostname }}'
  tags: [ mysql, users, mysql-users ]

  #
  # TODO: Drop test database
  #

# - name: copy latest DB dump (development/staging only)
#  copy: src=../../../rsync-freedom/archives/latest.sql.bz2 dest=/root
#  when: conf_env != "production"
#  notify: handle_mysql_import

- name: add mysql.local -> localhost (development/staging only)
  lineinfile: dest=/etc/hosts state=present line="127.0.0.1 mysql.local"
  tags: mysql

#
# MySQL binary replication (Outdated)
#
# - include: mysql-replication.yml

#
# db enabled
#
- include: db-enabled.yml
