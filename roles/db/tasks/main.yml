---

# file: playbooks/roles/db/tasks/main.yml

- name: be sure dbtier packages are installed (Debian family)
  apt: pkg={{ item }} state=installed
  with_items:
    # - mysql-server
    - python-mysqldb
    - bc
  when: ansible_os_family == "Debian"
  environment:
    DEBIAN_FRONTEND: noninteractive
  tags: [ mysql ]

- name: be sure dbtier packages are installed (FreeBSD)
  pkgng: name={{ item }} state=present cached=yes
  with_items:
    # - mariadb55-server-5.5.39
    # - mariadb55-client-5.5.39
    - py27-MySQLdb56-1.2.3_4
  when: ansible_distribution == "FreeBSD"
  tags: [ mysql ]

# - name: copy tuning-primer
#   copy: src=../files/mysql/tuning-primer dest=/usr/local/bin/tuning-primer owner=root group={{ conf_root_group }} mode=0755
#   tags: [ mysql ]

# - name: copy mysqltuner
#   copy: src=../files/mysql/mysqltuner dest=/usr/local/bin/mysqltuner owner=root group={{ conf_root_group }} mode=0755
#   tags: [ mysql ]

#
# MySQL system config (BEFORE PERCONA)
#
- name: create /etc/mysql
  file: path=/etc/mysql state=directory owner=root group={{ conf_root_group }} mode=0755
  when: ansible_os_family == "Debian"
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (Debian family)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/mysql/my.cnf owner=root group={{ conf_root_group }} mode=0644
  # notify: handle_restart_mysql
  when: ansible_os_family == "Debian"
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/my.cnf (RedHat family)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/my.cnf owner=root group={{ conf_root_group }} mode=0644
  # notify: handle_restart_mysql
  when: ansible_os_family == "RedHat"
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (FreeBSD)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/my.cnf owner=root group={{ conf_root_group }} mode=0644
  when: ansible_distribution == "FreeBSD"
  tags: [ mysql, mysql-conf, percona ]

#
# percona
#
- name: deploy /usr/local/bin/galeranotify.py
  template: src=usr/local/bin/galeranotify.py.j2 dest=/usr/local/bin/galeranotify owner=root group={{ conf_root_group }} mode=0755
  tags: [ mysql, percona ]

- include: percona.yml

- name: create DB clustercheck user
  mysql_user: check_implicit_admin=yes name={{ conf_mysql_clustercheck_user }} password={{ conf_mysql_clustercheck_password }} host=% priv="*.*:PROCESS" state=present
  when: conf_env != "development" and conf_galera_cluster == true
  ignore_errors: yes
  tags: [ mysql, percona, clustercheck ]

- name: create replication user
  mysql_user: check_implicit_admin=yes name={{ conf_mysql_replication_user }} password={{ conf_mysql_replication_password }} host=% priv="*.*:RELOAD,LOCK TABLES,REPLICATION CLIENT" state=present
  ignore_errors: yes
  tags: [ mysql, users, mysql-users ]

#
# MySQL system config (AFTER PERCONA)
#
# - name: deploy debian.cnf to /etc/mysql/debian.cnf
#   copy: src=../files/mysql/debian.cnf dest=/etc/mysql/debian.cnf owner=root group={{ conf_root_group }} mode=0600
#   when: ansible_os_family == "Debian"
#   tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (Debian family)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/mysql/my.cnf owner=root group={{ conf_root_group }} mode=0644
  # notify: handle_restart_mysql
  when: ansible_os_family == "Debian"
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/my.cnf (RedHat family)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/my.cnf owner=root group={{ conf_root_group }} mode=0644
  # notify: handle_restart_mysql
  when: ansible_os_family == "RedHat"
  tags: [ mysql, mysql-conf, percona ]

- name: deploy /etc/mysql/my.cnf (FreeBSD)
  template: src=etc/mysql/my-cnf.j2 dest=/etc/my.cnf owner=root group={{ conf_root_group }} mode=0644
  when: ansible_distribution == "FreeBSD"
  tags: [ mysql, mysql-conf, percona ]

#
# For now we don't start MySQL
#
#   First MySQL upgrade then mysql bootstrap
#
- name: mysql service state (Debian family)
  service: name=mysql state=started enabled=yes
  when: ansible_os_family == "Debian"
  ignore_errors: yes
  tags: [ mysql ]

#
# 1) Deploy my.cnf
# 2) Set MySQL root pwd
# 3) Import data
# 4) Reload grants / reload mysql
#

- name: deploy my.cnf to root
  template: src=etc/mysql/my.cnf-users.j2 dest=/root/.my.cnf owner=root group={{ conf_root_group }} mode=0600
  tags: [ mysql, mysql-conf, users ]

- name: update mysql root password
  mysql_user: check_implicit_admin=yes name=root host=% password={{ conf_mysql_root_password }} priv="*.*:ALL,GRANT"
  # mysql_user: check_implicit_admin=yes login_host={{ ansible_all_ipv4_addresses.0 }} name=root host=% password={{ conf_mysql_root_password }} priv=*.*:ALL,GRANT
  ignore_errors: yes
  tags: [ mysql, users, mysql-users, mysqlpass ]

- name: deploy my.cnf to enabled mysql admins
  template: src=etc/mysql/my.cnf-users.j2 dest=/home/{{ item.key }}/.my.cnf owner={{ item.key }} group={{ item.key }} mode=0600
  when:
    - item.value.state == "enabled" and item.value.is_mysql_admin == True
    - item.value.is_jailed is not defined or item.value.is_jailed != True
  with_dict: '{{ conf_users }}'
  tags: [ mysql, users, mysql-users ]

- name: remove unused mysql anonymous accesses
  mysql_user: check_implicit_admin=yes name='' host={{ item }} state=absent
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
    - '{{ ansible_fqdn }}'
    - '{{ ansible_hostname }}'
  ignore_errors: yes
  tags: [ mysql, users, mysql-users ]

- name: remove unused mysql root accesses
  mysql_user: check_implicit_admin=yes name=root host={{ item }} state=absent
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
    - '{{ ansible_fqdn }}'
    - '{{ ansible_hostname }}'
  ignore_errors: yes
  tags: [ mysql, users, mysql-users ]

- name: mysql service state (RedHat family)
  service: name=mysql state=restarted enabled=yes
  when: conf_wsrep_master == false and ansible_os_family == "RedHat"
  ignore_errors: yes
  tags: [ mysql ]

#
# db enabled
#
- include: db-enabled.yml
