#
# --- THIS FILE IS AUTOMATICALLY PROVISIONED THROUGH ANSIBLE ---
#

###########
# Backend #
###########
backend default {
  {{ conf_varnish_backend_default }}}

#############
# ACL PURGE #
#############
acl purge {
  {{ conf_varnish_acl_purge }}}

  #
  # X-Forwarded-For
  #
  # See: https://www.varnish-cache.org/docs/2.1/faq/http.html
  #      % varnishlog | grep X-Forwarded-For
  #
  # We can have two scenarios actually:
  #
  #   REQUEST -> Varnish -> Apache2               (Varnish inserts X-Forwarded-For)
  #   REQUEST -> HAPROXY -> Varnish -> Apache2    (HAPROXY inserts X-Forwarded-For)
  #
  # In case Varnish is first in the chain, insert own X-Forwarded-For.
  # Boolean "conf_lbtier_enable", defined per node, tells us if we use HAPROXY.
  #

################
# sub vcl_recv #
################
sub vcl_hash {
  hash_data(req.http.host);
  hash_data(req.url);
  hash_data(req.http.X-Forwarded-Proto);
  return(hash);
}

################
# sub vcl_recv #
################
sub vcl_recv {
{% if conf_varnish_vcl_recv is defined %}
    {{ conf_varnish_vcl_recv }}
{% endif %}
}

#################
# sub vcl_fetch #
#################
sub vcl_fetch {
  # Many requests contain Accept-Encoding HTTP headers.
  # We standardize and remove these when unnecessary to make it easier to cache requests.
  if (req.http.Accept-Encoding) {
    # If the request URL has any of these extensions, remove the Accept-Encoding header as it is meaningless.
   if (req.url ~ "\.(jpe?g|jpe|gif|png)$") {
      remove req.http.Accept-Encoding;
    # If the Accept-Encoding contains 'gzip' standardize it.
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    # If the Accept-Encoding contains 'deflate' standardize it.
    } elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    # If the Accept-Encoding header isn't matched above, remove it.
    } else {
      remove req.http.Accept-Encoding;
    }
  }

  # Strip any cookies before an image/JS/CSS is inserted into cache.
  if (req.url ~ "\.(jpe?g|jpe|gif|png|css|js)$") {
     unset beresp.http.set-cookie;
  }

  #set obj.grace = 5m;
  set beresp.grace = 2m;

{% if conf_varnish_vcl_fetch is defined %}
  {{ conf_varnish_vcl_fetch }}
{% endif %}
}

###############
# sub vcl_hit #
###############
sub vcl_hit {
  if (req.request == "PURGE") {
    purge;
    error 200 "Purged.";
  }

{% if conf_varnish_vcl_hit is defined %}
  {{ conf_varnish_vcl_hit }}
{% endif %}
}

################
# sub vcl_miss #
################
sub vcl_miss {
  if (req.request == "PURGE") {
    purge;
    error 200 "Not in cache.";
  }

{% if conf_varnish_vcl_miss is defined %}
  {{ conf_varnish_vcl_miss }}
{% endif %}
}

################
# sub vcl_pass #
################
sub vcl_pass {
  if (req.request == "PURGE") {
      error 502 "PURGE on a passed object";
  }

{% if conf_varnish_vcl_pass is defined %}
  {{ conf_varnish_vcl_pass }}
{% endif %}
}

###################
# sub vcl_deliver #
###################
sub vcl_deliver {
  # If the page is already cached return a HIT header, otherwise MISS.
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
    set resp.http.X-Cache-Hits = obj.hits;
  } else {
    set resp.http.X-Cache = "MISS";
  }

{% if conf_varnish_vcl_deliver is defined %}
  {{ conf_varnish_vcl_deliver }}
{% endif %}
}
