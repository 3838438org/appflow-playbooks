#
# --- THIS FILE IS AUTOMATICALLY PROVISIONED THROUGH ANSIBLE ---
#

###########
# Backend #
###########
backend default {
  {{ conf_varnish_backend_default }}}

#############
# ACL PURGE #
#############
acl purge {
  {{ conf_varnish_acl_purge }}}

  #
  # X-Forwarded-For
  #
  # See: https://www.varnish-cache.org/docs/2.1/faq/http.html
  #      % varnishlog | grep X-Forwarded-For
  #
  # We can have two scenarios actually:
  #
  #   REQUEST -> Varnish -> Apache2               (Varnish inserts X-Forwarded-For)
  #   REQUEST -> HAPROXY -> Varnish -> Apache2    (HAPROXY inserts X-Forwarded-For)
  #
  # In case Varnish is first in the chain, insert own X-Forwarded-For.
  # Boolean "conf_lbtier_enable", defined per node, tells us if we use HAPROXY.
  #

################
# sub vcl_recv #
################
sub vcl_hash {
  # Hash protocol and URL.
  hash_data(req.http.X-Forwarded-Proto);
  hash_data(req.url);

  # Hash host or server IP.
  if (req.http.host) {
      hash_data(req.http.host);
  } else {
      hash_data(server.ip);
  }

  # Hash cookies for requests that have them.
  if (req.http.Cookie) {
      hash_data(req.http.Cookie);
  }

  return (hash);
}

################
# sub vcl_recv #
################
sub vcl_recv {
  # Allow purging.
  if (req.request == "PURGE") {
      if (!client.ip ~ purge) {
          error 405 "This IP is not allowed to send PURGE requests.";
      }

      # Force entry into vcl_hit() or vcl_miss() below and purge the actual cache.
      return (lookup);
  }

  # Only deal with "normal" method requests. (http://book.varnish-software.com/3.0/VCL_Basics.html#default-vcl-recv)
  if (req.request != "GET" &&
      req.request != "HEAD" &&
      req.request != "PUT" &&
      req.request != "POST" &&
      req.request != "TRACE" &&
      req.request != "OPTIONS" &&
      req.request != "PATCH" &&
      req.request != "DELETE") {
      /* Non-RFC2616 or CONNECT which is weird. */
      return (pipe);
  }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed. (http://book.varnish-software.com/3.0/VCL_Basics.html#default-vcl-recv)
  if (req.request != "GET" && req.request != "HEAD") {
      return (pass);
  }

  # Normalize Accept-Encoding header.
  if (req.http.Accept-Encoding) {
      if (req.url ~ "^[^?]*\.(7z|avi|bz2|docx|eot|flac|flv|gif|ico|gz|jpeg|jpg|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|pdf|png|pptx|rar|svgz|tbz|tgz|txz|webm|webp|woff2|xlsx|xz|zip)(\?.*)?$") {
          # No point in compressing these.
          remove req.http.Accept-Encoding;
      } elsif (req.http.Accept-Encoding ~ "gzip") {
          set req.http.Accept-Encoding = "gzip";
      } elsif (req.http.Accept-Encoding ~ "deflate") {
          set req.http.Accept-Encoding = "deflate";
      } else {
          # Unkown algorithm.
          remove req.http.Accept-Encoding;
      }
  }

  # Large static files should be piped, so they are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  if (req.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
      unset req.http.Cookie;
      return (pipe);
  }

  # Remove all cookies for static files.
  if (req.url ~ "^[^?]*\.(bmp|css|csv|doc|docx|eot|gif|ico|jpeg|jpg|js|odt|otf|pdf|png|ppt|pptx|rtf|svg|svgz|swf|ttf|txt|webp|woff|woff2|xls|xlsx|xml)(\?.*)?$") {
      unset req.http.Cookie;
      return (lookup);
  }

{% if conf_varnish_vcl_recv is defined %}
  {{ conf_varnish_vcl_recv }}
{% endif %}

  # Don't cache requests with authorization. (http://book.varnish-software.com/3.0/VCL_Basics.html#default-vcl-recv)
  if (req.http.Authorization) {
      return (pass);
  }

  return (lookup);
}

#################
# sub vcl_fetch #
#################
sub vcl_fetch {
  # Strip any cookies before a static file is inserted into cache.
  if (req.url ~ "^[^?]*\.(bmp|css|csv|doc|docx|eot|gif|ico|jpeg|jpg|js|odt|otf|pdf|png|ppt|pptx|rtf|svg|svgz|swf|ttf|txt|webp|woff|woff2|xls|xlsx|xml)(\?.*)?$") {
     unset beresp.http.set-cookie;
  }

  # Allow stale content, in case the backend goes down. (Old content to show is better than no content at all.)
  set beresp.grace = 6h;

  {% if conf_varnish_vcl_fetch is defined %}
    {{ conf_varnish_vcl_fetch }}
  {% endif %}

  # Set 2min cache if unset for static files. (http://book.varnish-software.com/3.0/VCL_Basics.html#default-vcl-fetch)
  if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Vary == "*") {
      set beresp.ttl = 120s;
      return (hit_for_pass);
  }

  return (deliver);
}

###############
# sub vcl_hit #
###############
sub vcl_hit {
  if (req.request == "PURGE") {
    purge;
    error 200 "Purged.";
  }

{% if conf_varnish_vcl_hit is defined %}
  {{ conf_varnish_vcl_hit }}
{% endif %}

  return (deliver);
}

################
# sub vcl_miss #
################
sub vcl_miss {
  if (req.request == "PURGE") {
    purge;
    error 200 "Not in cache.";
  }

{% if conf_varnish_vcl_miss is defined %}
  {{ conf_varnish_vcl_miss }}
{% endif %}

  return (fetch);
}

################
# sub vcl_pass #
################
sub vcl_pass {
  if (req.request == "PURGE") {
      error 502 "PURGE on a passed object";
  }

{% if conf_varnish_vcl_pass is defined %}
  {{ conf_varnish_vcl_pass }}
{% endif %}

  return (pass);
}

###################
# sub vcl_deliver #
###################
sub vcl_deliver {
  # If the page is already cached return a HIT header, otherwise MISS.
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
    set resp.http.X-Cache-Hits = obj.hits;
  } else {
    set resp.http.X-Cache = "MISS";
  }

{% if conf_varnish_vcl_deliver is defined %}
  {{ conf_varnish_vcl_deliver }}
{% endif %}

  return (deliver);
}
