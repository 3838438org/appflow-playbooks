---

# file: playbooks/roles/web/tasks/glusterfs.yml

#
# Procedure for setting up a three-node cluster:
#
# Peer manually (on all nodes do this:)
#
# % gluster peer probe gluster-node0.local
# % gluster peer probe gluster-node1.local
# % gluster peer probe gluster-node2.local
#
# run AppFlow.
#

- name: remove osbolete glusterfs PPA (staging and production) (Ubuntu)
  file: name=/etc/apt/sources.list.d/{{ item }} state=absent
  with_items:
    - "ppa_semiosis_ubuntu_glusterfs_3_5_precise.list"
    - "ppa_semiosis_ubuntu_glusterfs_3_5_trusty.list"
  when: ansible_distribution == "Ubuntu" and conf_env != "development"
  tags: [ glusterfs ]

- name: glusterfs PPA (staging and production) (Ubuntu)
  apt_repository: repo='ppa:gluster/glusterfs-3.6' update_cache=yes
  when: ansible_distribution == "Ubuntu" and conf_env != "development"
  tags: [ glusterfs ]

- name: install glusterfs (staging and production) (Ubuntu)
  apt: pkg={{ item }} state=latest
  with_items:
    - glusterfs-server
    - glusterfs-client
    - nfs-common
    - autofs5
  when: ansible_distribution == "Ubuntu" and conf_env != "development"
  tags: [ glusterfs ]

- name: glusterfs YUM (staging and production) (RedHat family)
  package: name={{ item }} state=latest
  with_items:
    # - centos-release-gluster38.noarch
    - centos-release-gluster36.noarch
  when: ansible_os_family == "RedHat" and conf_env != "development"
  tags: [ glusterfs ]

- name: install glusterfs (staging and production) (RedHat family)
  package: name={{ item }} state=latest
  with_items:
    - glusterfs
    - glusterfs-server
    - glusterfs-cli
    # - nfs-common
    - autofs
  when: ansible_os_family == "RedHat" and conf_env != "development"
  tags: [ glusterfs ]

- name: glusterd.service service state (staging and production) (RedHat family)
  service: name=glusterd.service state=started enabled=yes
  when: ansible_os_family == "RedHat" and conf_env != "development"
  tags: [ glusterfs, glusterfs-conf ]

- name: create glusterfs data folder (/data/glusterfs/gvol0/brick1)
  file: path=/data/glusterfs/gvol0/brick1 state=directory owner=root group={{ conf_root_group }} mode=0755
  tags: [ glusterfs, glusterfs-conf ]

- name: create glusterfs mountpoint (/mnt/glusterfs/gvol0)
  file: path=/mnt/glusterfs/gvol0 state=directory owner=root group={{ conf_root_group }} mode=0755
  when: conf_env != "development"
  tags: [ glusterfs, glusterfs-conf ]

- name: create glusterfs mountpoint (/mnt/glusterfs/gvol0/brick1)
  file: path=/mnt/glusterfs/gvol0/brick1 state=directory owner=root group={{ conf_root_group }} mode=0755
  when: conf_env == "development"
  tags: [ glusterfs, glusterfs-conf ]

- name: check gluster peer status (master)
  shell: "{{ conf_glusterfs_peer }}"
  ignore_errors: yes
  register: gluster_peer_res
  failed_when: gluster_peer_res.rc != 0
  when: conf_env != "development" and conf_glusterfs_master == true
  tags: [ glusterfs, glusterfs-conf ]

# We need to register the master on the clients (TODO)
- name: check gluster peer status (clients)
  shell: gluster peer probe {{ conf_glusterfs_node0 }}
  ignore_errors: yes
  # register: gluster_peer_res
  # failed_when: gluster_peer_res.rc != 0
  when: conf_env != "development" and conf_glusterfs_master == false
  tags: [ glusterfs, glusterfs-conf ]

- name: check gluster gvol0
  shell: gluster volume info gvol0
  ignore_errors: yes
  register: gluster_check_res
  failed_when: gluster_check_res.rc != 0
  when: conf_env != "development" and gluster_peer_res != "failed" and conf_glusterfs_master == true
  tags: [ glusterfs, glusterfs-conf ]

# - debug: msg="DEBUG is MASTER {{ conf_glusterfs_master }}"
#   when: gluster_check_res|failed and conf_glusterfs_master == true

- name: create gluster gvol0
  shell: "{{ conf_glusterfs_gvol0 }}"
  when: conf_env != "development" and gluster_check_res|failed and conf_glusterfs_master == true
  tags: [ glusterfs, glusterfs-conf ]

- name: start gluster gvol0
  shell: gluster volume start gvol0
  when: conf_env != "development" and gluster_check_res|failed and conf_glusterfs_master == true
  tags: [ glusterfs, glusterfs-conf ]

- name: set glusterfs volume options gvol0
  shell: gluster volume set gvol0 nfs.disable on
  # when: conf_env != "development" and gluster_check_res|failed and conf_glusterfs_master == true
  when: conf_env != "development" and conf_glusterfs_master == true
  tags: [ glusterfs, glusterfs-conf ]

- name: autofs GlusterFS
  template: src=etc/{{ item }}.j2 dest=/etc/{{ item }} owner=root group={{ conf_root_group }} mode=0644
  with_items:
      - "auto.master"
      - "auto.glusterfs"
  when: conf_env != "development"
  notify: handle_restart_autofs
  tags: [ glusterfs, glusterfs-conf ]
