---

# file: playbooks/roles/web/tasks/glusterfs.yml

#
# Procedure for setting up a three-node cluster:
#
#   % make provision env=production limit=webservers tenant=mrrobot tags=glusterfs
#   % ssh compute-02.webservers "sudo gluster peer probe gluster-node0.local"
#   % ssh compute-03.webservers "sudo gluster peer probe gluster-node0.local"
#   % make provision env=production limit=webservers tenant=mrrobot tags=glusterfs
#

- name: remove osbolete glusterfs PPA (staging and production)
  file: name=/etc/apt/sources.list.d/{{ item }} state=absent
  with_items:
    - "ppa_semiosis_ubuntu_glusterfs_3_5_precise.list"
    - "ppa_semiosis_ubuntu_glusterfs_3_5_trusty.list"
  when: conf_env != "development"
  tags: [ glusterfs, update ]

- name: glusterfs PPA (staging and production)
  apt_repository: repo='ppa:gluster/glusterfs-3.6' update_cache=yes
  when: conf_env != "development"
  tags: [ glusterfs, update ]

- name: install glusterfs (staging and production)
  apt: pkg={{item}} state=latest
  with_items:
    - glusterfs-server
    - glusterfs-client
    - nfs-common
    - autofs5
  when: conf_env != "development"
  tags: [ glusterfs, update ]

- name: create glusterfs data folder (/data/glusterfs/gvol0/brick1)
  file: path=/data/glusterfs/gvol0/brick1 state=directory owner=root group={{ conf_root_group }} mode=0755
  tags: [ glusterfs ]

- name: create glusterfs mountpoint (/mnt/glusterfs/gvol0)
  file: path=/mnt/glusterfs/gvol0 state=directory owner=root group={{ conf_root_group }} mode=0755
  when: conf_env != "development"
  tags: [ glusterfs ]

- name: create glusterfs mountpoint (/mnt/glusterfs/gvol0/brick1)
  file: path=/mnt/glusterfs/gvol0/brick1 state=directory owner=root group={{ conf_root_group }} mode=0755
  when: conf_env == "development"
  tags: [ glusterfs ]

- name: check gluster peer status
  # shell: gluster peer probe {{ conf_glusterfs_node1 }} && gluster peer probe {{ conf_glusterfs_node2 }}
  shell: "{{ conf_glusterfs_peer }}"
  ignore_errors: yes
  register: gluster_peer_res
  failed_when: gluster_peer_res.rc != 0
  when: conf_env != "development" and conf_glusterfs_master == true
  tags: [ glusterfs ]

# We need to register the master on the client (TODO)
- name: check gluster peer status
  shell: gluster peer probe {{ conf_glusterfs_node0 }}
  ignore_errors: yes
  # register: gluster_peer_res
  # failed_when: gluster_peer_res.rc != 0
  when: conf_env != "development" and conf_glusterfs_master == false
  tags: [ glusterfs ]

- name: check gluster gvol0
  shell: gluster volume info gvol0
  ignore_errors: yes
  register: gluster_check_res
  failed_when: gluster_check_res.rc != 0
  when: conf_env != "development" and gluster_peer_res != "failed" and conf_glusterfs_master == true
  tags: [ glusterfs ]

# - debug: msg="DEBUG is MASTER {{ conf_glusterfs_master }}"
#   when: gluster_check_res|failed and conf_glusterfs_master == true

- name: create gluster gvol0
  shell: gluster volume create gvol0 replica 3 {{ conf_glusterfs_node0 }}:/data/glusterfs/gvol0/brick1 {{ conf_glusterfs_node1 }}:/data/glusterfs/gvol0/brick1 {{ conf_glusterfs_node2 }}:/data/glusterfs/gvol0/brick1 force
  shell: "{{ conf_glusterfs_gvol0 }}"
  when: conf_env != "development" and gluster_check_res|failed and conf_glusterfs_master == true
  tags: [ glusterfs ]

- name: start gluster gvol0
  shell: gluster volume start gvol0
  when: conf_env != "development" and gluster_check_res|failed and conf_glusterfs_master == true
  tags: [ glusterfs ]

- name: set glusterfs volume options gvol0
  shell: gluster volume set gvol0 nfs.disable on
  # when: conf_env != "development" and gluster_check_res|failed and conf_glusterfs_master == true
  when: conf_env != "development" and conf_glusterfs_master == true
  tags: [ glusterfs ]

- name: autofs GlusterFS
  template: src=etc/{{ item }}.j2 dest=/etc/{{ item }} owner=root group={{ conf_root_group }} mode=0644
  with_items:
      - "auto.master"
      - "auto.glusterfs"
  when: conf_env != "development"
  notify: handle_restart_autofs
  tags: [ glusterfs ]
