---

# file: playbooks/roles/lb/tasks/etcd.yml

# - name: Include Configuration
#   include_vars: "{{ item }}"
#   with_first_found:
#     - "{{ ansible_os_family }}.yml"
#   when: not conf_etcd_config_only|bool

- name: Install system dependencies for synchronize
  package: name={{ item }}
  with_flattened: "{{ conf_etcd_install_dependencies|default([]) }}"
  when: not conf_etcd_config_only|bool
  tags: [ etcd ]

- name: Download etcd
  get_url: url={{ conf_etcd_download_url }} dest={{ conf_etcd_download_dir }}/{{ conf_etcd_download_filename }} sha256sum={{ conf_etcd_checksum }}
  when: not conf_etcd_config_only|bool
  tags: [ etcd ]

- name: Unarchive etcd
  unarchive: copy=no
             src={{ conf_etcd_download_dir }}/{{ conf_etcd_download_filename }}
             dest={{ conf_etcd_download_dir }}
             creates="{{ conf_etcd_download_dir }}/{{ conf_etcd_release }}/etcd"
  when: not conf_etcd_config_only|bool
  tags: [ etcd ]

- name: Copy binaries from archive into etcd dir
  synchronize: src="{{ conf_etcd_download_dir }}/{{ conf_etcd_release }}/{{ item }}"
               dest="{{ conf_etcd_dir }}"
               archive=True
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - etcd
    - etcdctl
  when: not conf_etcd_config_only|bool
  tags: [ etcd ]

- name: Add etcd upstart service
  template: src=etc/init/etcd.conf.j2
            dest=/etc/init/etcd.conf
            mode=0644
  when: ansible_service_mgr == "upstart"
  notify:
    - handle_restart_etcd
  tags: [ etcd ]

- name: Add etcd systemd service
  template: src=etc/systemd/system/etcd.service.j2
            dest=/etc/systemd/system/etcd.service
            mode=0644
  when: ansible_service_mgr == "systemd"
  notify:
    - handle_reload_systemd
    - handle_restart_etcd
  tags: [ etcd ]

# # Debian
# - name: install xinetd (Debian family)
#   apt: pkg={{ item }} state=latest force=yes
#   with_items:
#     - xinetd
#   environment:
#     DEBIAN_FRONTEND: noninteractive
#   when: ansible_os_family == "Debian" and conf_env != "development" and conf_galera_cluster == true
#   ignore_errors: yes
#   tags: [ etcd, ssl ]

# # RedHat
# - name: install xinetd (RedHat family)
#   yum: pkg={{ item }} state=latest
#   with_items:
#     - xinetd
#   when: ansible_os_family == "RedHat" and conf_env != "development" and conf_galera_cluster == true
#   ignore_errors: yes
#   tags: [ etcd, ssl ]

# ################
# # HAPROXY BASE #
# ################
# # Ubuntu
# - name: etcd apt-key (Ubuntu)
#   apt_key: data="{{ lookup('file', 'etcd/etcd.gpg') }}" state=present
#   when: ansible_distribution == "Ubuntu"
#   tags: [ etcd, ssl ]

# - name: disable repo ppa:vbernat/etcd-1.5 (Ubuntu)
#   apt_repository: repo='deb http://ppa.launchpad.net/vbernat/etcd-1.5/ubuntu {{ ansible_distribution_release }} main' update_cache=yes state=absent
#   when: ansible_distribution == "Ubuntu"
#   tags: [ etcd, ssl ]

# - name: enable repo ppa:vbernat/etcd-1.6 (Ubuntu)
#   apt_repository: repo='deb http://ppa.launchpad.net/vbernat/etcd-1.6/ubuntu {{ ansible_distribution_release }} main' update_cache=yes
#   when: ansible_distribution == "Ubuntu"
#   tags: [ etcd, ssl ]

# - name: be sure latest etcd packages are installed (Ubuntu)
#   apt: pkg={{ item }} state=latest
#   with_items:
#     - etcd
#   when: ansible_distribution == "Ubuntu"
#   environment:
#     DEBIAN_FRONTEND: noninteractive
#   tags: [ etcd, ssl ]

# # RedHat
# - name: be sure latest etcd packages are installed (RedHat Family)
#   yum: pkg={{ item }} state=latest
#   with_items:
#     - etcd
#   when:
#      - ansible_os_family == "RedHat"
#   tags: [ etcd, ssl ]

# - name: enable etcd (Ubuntu)
#   lineinfile: "dest=/etc/default/etcd regexp='^ENABLED=0' line='ENABLED=1'"
#   when: ansible_os_family == "Debian"
#   tags: [ etcd, ssl ]

# # RedHat/CentOS -> use systemctl to enable etcd
# - name: enable etcd (RedHat Family)
#   service: name=etcd state=started enabled=yes
#   when: ansible_os_family == "RedHat"
#   tags: [ etcd, ssl ]

# ############
# # SSL BASE #
# ############
# - name: ssl-certs group
#   group: name=ssl-cert state=present
#   when: ansible_os_family == "RedHat"
#   tags: [ etcd, ssl, ssl-conf ]

# - name: Make sure etcd user is in ssl-cert
#   user: name=etcd groups=etcd,ssl-cert
#   when: ansible_os_family == "RedHat"
#   tags: [ etcd, ssl, ssl-conf ]

# - name: /etc/certs
#   file: path=/etc/certs mode=750 state=directory owner=root group=ssl-cert
#   tags: [ etcd, ssl, ssl-conf ]

# ###########
# # SSL PEM #
# ###########

# - name: deploy vhost PEM (Debian/RedHat family)
#   copy: content="{{ item.value.ssl_pem }}" dest="/etc/certs/{{ item.value.ssl_pemfile }}" owner=root group=ssl-cert mode=0640
#   when:
#     - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
#     - item.value.state == "enabled" and item.value.ssl_etcd == true
#   with_dict: '{{ conf_vhosts_common }}'
#   notify: handle_reload_etcd
#   tags: [ etcd, ssl, ssl-conf ]

# ##################
# # HAPROXY CONFIG #
# ##################

# #
# # Idea:
# #
# # 1) Deploy cfg to /tmp
# # 2) etcd -f /etc/etcd/etcd.cfg -c
# # 3) if OK deploy to /etc/etcd/etcd.cfg
# #

# - name: deploy /etc/etcd/etcd.cfg (Debian/RedHat family)
#   template: src=etc/etcd/etcd-cfg.j2 dest=/etc/etcd/etcd.cfg owner=root group={{ conf_root_group }} mode=0644
#   notify: handle_reload_etcd
#   when:
#     - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
#     - conf_confd_enable is defined and conf_confd_enable == false
#   tags: [ etcd, etcd-conf, ssl, etcd-acl ]

# - name: deploy /etc/etcd/*acl-files*.txt (Debian/RedHat family)
#   copy: content="{{ item.value.content }}" dest="/etc/etcd/{{ item.key }}" owner=root group={{ conf_root_group }} mode=0644
#   with_dict: '{{ conf_conf_etcd_acl_files }}'
#   notify: handle_reload_etcd
#   when:
#     - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
#     - conf_confd_enable is defined and conf_confd_enable == false
#     - item.value.state == "present"
#   tags: [ etcd, etcd-conf, etcd-acl ]

# - name: re-start xinetd
#   service: name=xinetd enabled=yes state=restarted
#   when: conf_conf_etcd_pxc_backend is defined and conf_galera_cluster == true
#   tags: [ etcd, etcd-conf, ssl ]

# - name: re-start etcd
#   service: name=etcd enabled=yes state=restarted
#   tags: [ etcd, etcd-conf, ssl ]
